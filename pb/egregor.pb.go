// Code generated by protoc-gen-go.
// source: egregor.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	egregor.proto

It has these top-level messages:
	CommandRequest
	CommandResponse
	HelpRequest
	Empty
	CommandList
	CommandEntry
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CommandRequest struct {
	Nick    string   `protobuf:"bytes,1,opt,name=nick" json:"nick,omitempty"`
	Command string   `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Args    []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
}

func (m *CommandRequest) Reset()                    { *m = CommandRequest{} }
func (m *CommandRequest) String() string            { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()               {}
func (*CommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CommandResponse struct {
	Reply []string `protobuf:"bytes,1,rep,name=reply" json:"reply,omitempty"`
}

func (m *CommandResponse) Reset()                    { *m = CommandResponse{} }
func (m *CommandResponse) String() string            { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()               {}
func (*CommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type HelpRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (m *HelpRequest) Reset()                    { *m = HelpRequest{} }
func (m *HelpRequest) String() string            { return proto.CompactTextString(m) }
func (*HelpRequest) ProtoMessage()               {}
func (*HelpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CommandList struct {
	List []*CommandEntry `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *CommandList) Reset()                    { *m = CommandList{} }
func (m *CommandList) String() string            { return proto.CompactTextString(m) }
func (*CommandList) ProtoMessage()               {}
func (*CommandList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CommandList) GetList() []*CommandEntry {
	if m != nil {
		return m.List
	}
	return nil
}

type CommandEntry struct {
	Command     string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *CommandEntry) Reset()                    { *m = CommandEntry{} }
func (m *CommandEntry) String() string            { return proto.CompactTextString(m) }
func (*CommandEntry) ProtoMessage()               {}
func (*CommandEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*CommandRequest)(nil), "pb.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "pb.CommandResponse")
	proto.RegisterType((*HelpRequest)(nil), "pb.HelpRequest")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*CommandList)(nil), "pb.CommandList")
	proto.RegisterType((*CommandEntry)(nil), "pb.CommandEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Command service

type CommandClient interface {
	DoCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	GetUsage(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	GetCommands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandList, error)
}

type commandClient struct {
	cc *grpc.ClientConn
}

func NewCommandClient(cc *grpc.ClientConn) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) DoCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/pb.Command/DoCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) GetUsage(ctx context.Context, in *HelpRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := grpc.Invoke(ctx, "/pb.Command/GetUsage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandClient) GetCommands(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CommandList, error) {
	out := new(CommandList)
	err := grpc.Invoke(ctx, "/pb.Command/GetCommands", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Command service

type CommandServer interface {
	DoCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	GetUsage(context.Context, *HelpRequest) (*CommandResponse, error)
	GetCommands(context.Context, *Empty) (*CommandList, error)
}

func RegisterCommandServer(s *grpc.Server, srv CommandServer) {
	s.RegisterService(&_Command_serviceDesc, srv)
}

func _Command_DoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CommandServer).DoCommand(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Command_GetUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(HelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CommandServer).GetUsage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Command_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CommandServer).GetCommands(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Command_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCommand",
			Handler:    _Command_DoCommand_Handler,
		},
		{
			MethodName: "GetUsage",
			Handler:    _Command_GetUsage_Handler,
		},
		{
			MethodName: "GetCommands",
			Handler:    _Command_GetCommands_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x51, 0xcd, 0x4e, 0x84, 0x30,
	0x10, 0x5e, 0xf6, 0x47, 0x64, 0x50, 0x31, 0xa3, 0x07, 0xb2, 0x27, 0xd2, 0x98, 0x68, 0x62, 0xc2,
	0x81, 0x4d, 0x7c, 0x01, 0xdd, 0x68, 0x8c, 0x27, 0x12, 0x1f, 0x00, 0xd8, 0x86, 0x10, 0x81, 0xd6,
	0xb6, 0x1e, 0x78, 0x1d, 0x9f, 0x54, 0x5a, 0x8a, 0xe9, 0x1e, 0xf6, 0x44, 0xe7, 0x9b, 0xef, 0x27,
	0xf3, 0x01, 0x97, 0xb4, 0x16, 0xb4, 0x66, 0x22, 0xe5, 0x82, 0x29, 0x86, 0x4b, 0x5e, 0x92, 0x1c,
	0xae, 0x9e, 0x59, 0xd7, 0x15, 0xfd, 0x21, 0xa7, 0xdf, 0x3f, 0x54, 0x2a, 0x44, 0x58, 0xf7, 0x4d,
	0xf5, 0x15, 0x7b, 0x89, 0xf7, 0x10, 0xe4, 0xe6, 0x8d, 0x31, 0xf8, 0xd5, 0xc4, 0x8a, 0x97, 0x06,
	0x9e, 0x47, 0xcd, 0x2e, 0x44, 0x2d, 0xe3, 0x55, 0xb2, 0xd2, 0x6c, 0xfd, 0x26, 0xf7, 0x10, 0xfd,
	0x7b, 0x4a, 0xce, 0x7a, 0x49, 0xf1, 0x16, 0x36, 0x82, 0xf2, 0x76, 0x18, 0x5d, 0x35, 0x6f, 0x1a,
	0x46, 0x62, 0xf8, 0x46, 0x5b, 0x3e, 0x27, 0x3b, 0x29, 0xde, 0x51, 0x0a, 0xf1, 0x61, 0xb3, 0xef,
	0xb8, 0x1a, 0xc8, 0x0e, 0x42, 0x6b, 0xfd, 0xd1, 0x8c, 0x8a, 0x3b, 0x58, 0xb7, 0xe3, 0xd7, 0xb8,
	0x86, 0xd9, 0x75, 0xca, 0xcb, 0xd4, 0xae, 0xf7, 0xbd, 0x12, 0x43, 0x6e, 0xb6, 0xe4, 0x1d, 0x2e,
	0x5c, 0xf4, 0x74, 0x0e, 0x26, 0x10, 0x1e, 0xa8, 0xac, 0x44, 0xc3, 0x55, 0xc3, 0x7a, 0x7b, 0xab,
	0x0b, 0x65, 0xbf, 0x1e, 0xf8, 0xd6, 0x0c, 0x9f, 0x20, 0x78, 0x61, 0xf3, 0x80, 0x4e, 0xb8, 0x3d,
	0x68, 0x7b, 0x73, 0x84, 0x4d, 0x55, 0x90, 0x05, 0x66, 0x70, 0xfe, 0x4a, 0xd5, 0xa7, 0x2c, 0x6a,
	0x8a, 0x91, 0xa6, 0x38, 0x25, 0x9c, 0xd2, 0x3c, 0x42, 0x38, 0x6a, 0x2c, 0x2e, 0x31, 0xd0, 0x2c,
	0x53, 0xc9, 0x36, 0x72, 0x04, 0xba, 0x14, 0xb2, 0x28, 0xcf, 0xcc, 0xff, 0xdd, 0xfd, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x0b, 0xcb, 0x7e, 0xf6, 0xf0, 0x01, 0x00, 0x00,
}
